[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[tool.flit.module]
name = "django_virtual_models"

[project]
name = "django-virtual-models"
description = "Improve performance and maintainability with a prefetching layer in your Django / Django REST Framework project"
readme = "README.md"
requires-python = ">=3.8"
keywords = ["django", "prefetch", "performance", "optimization"]
license = {file = "LICENSE"}
authors = [
    { name = "FlÃ¡vio Juvenal (Vinta Software)", email = "flavio@vinta.com.br" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "django >=3.2",
    "djangorestframework >=3.13.1",
    "typing-extensions >=4.3.0",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/vintasoftware/django-virtual-models"
Documentation = "https://vintasoftware.github.io/django-virtual-models/"

[project.optional-dependencies]
doc = [
    "mkdocs-material==8.5.6",
]
dev = [
    "mypy ==1.3.0 ",
    "autoflake >=2.1.1,<3.0.0",
    "flake8 >=6.0.0,<7.0.0",
    "black ==23.3.0",
    "isort >=5.12.0,<6.0.0",
    "pre-commit >=3.3.2,<4.0.0",
]
test = [
    "pytest >=7.3.1,<8.0.0",
    "pytest-cov[toml] >=4.1.0,<5.0.0",
    "pytest-django >=4.5.2,<5.0.0",
    "tox >=4.5.2,<5.0.0",
    "model_bakery >=1.11.0,<2.0.0",
]
example = [
    "django >= 4.2,<6.0",
    "pyyaml >= 6.0,<7.0",
]

[tool.black]
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | settings
    | migrations
  )/
)
'''
include = '\.pyi?$'
line-length = 100
target-version = ['py38']

[tool.isort]
profile = 'black'
known_django = 'django'
known_drf = 'rest_framework'
line_length = 100
sections = ['FUTURE', 'STDLIB', 'DJANGO', 'DRF', 'THIRDPARTY', 'FIRSTPARTY', 'LOCALFOLDER']
skip = ['./venv', './env', 'migrations']

[tool.bandit]
exclude_dirs = ["tests","settings"]

[tool.pytest.ini_options]
addopts = [
  "--strict-config",
  "--strict-markers",
]
xfail_strict = true
junit_family = "xunit2"
testpaths = [
    "tests",
]
# filterwarnings = [
#     "ignore::django.utils.deprecation.RemovedInDjango50Warning",
# ]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = {linux}-py{310,311,312,313}-django{42,50,51,52}
isolated_build = True

[gh-actions]
python =
    3.10: py310
    3.11: py311
    3.12: py312
    3.13: py313

[gh-actions:env]
OS =
    ubuntu-latest: linux
DJANGO =
    4.2: django42
    5.0: django50
    5.1: django51
    5.2: django52

[testenv]
deps =
    django42: django~=4.2
    django50: django~=5.0
    django51: django~=5.1
    django52: django~=5.2
    .[test]
commands =
    coverage run -m pytest --basetemp={envtmpdir}
    coverage xml
"""

[tool.coverage.run]
branch = true
omit = ["tests/*"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    'pragma: no cover',

    # Don't complain if tests don't hit defensive assertion code:
    'raise AssertionError',
    'raise NotImplementedError',

    # Don't complain if non-runnable code isn't run:
    'if 0:',
    'if __name__ == .__main__.:',

    # Don't complain about abstract methods, they aren't run:
    '@(abc\.)?abstractmethod',
]
